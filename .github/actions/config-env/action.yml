name: Config Environment
description: This action will provision an Azure environment and read its variables (deployment outputs)
             If you don't want to do the provisioning just get env variables, set MANUAL_PROVISIONING input to true
inputs:
  AZURE_CREDENTIALS:
    description: 'Azure credentials'
    required: true
  AZURE_ENV_NAME:
    description: 'Azure environment name'
    required: true
  AZURE_SUBSCRIPTION_ID:
    description: 'Azure subscription ID'
    required: true
  AZURE_LOCATION:
    description: 'Azure location'
    required: true
  MANUAL_PROVISIONING:
    description: 'Will not provision the environment if value is true, default is false'
    required: false
runs:
  using: "composite"
  steps:
    - name: Check GitHub env variables
      shell: bash
      run: |
        if [ -z "${{ inputs.AZURE_ENV_NAME }}" ] || [ -z "${{ inputs.AZURE_CREDENTIALS }}" ]; then 
            echo "Make sure AZURE_ENV_NAME, AZURE_SUBSCRIPTION_ID, AZURE_LOCATION and AZURE_CREDENTIALS are set."
            exit 1
        else
            echo "AZURE_ENV_NAME is set to ${{ inputs.AZURE_ENV_NAME }}"
            export AZURE_DEV_COLLECT_TELEMETRY=no            
        fi      

    - name: Install Azure Developer CLI 
      uses: Azure/setup-azd@v1.0.0

    - name: Login to Azure CLI
      uses: azure/login@v2
      with:
        creds: ${{ inputs.AZURE_CREDENTIALS }}

    - name: Login to Azure Developer CLI 
      shell: bash
      run: |
        echo "Logging to Azure Developer CLI..."

        AZURE_CREDENTIALS=$(echo '${{ inputs.AZURE_CREDENTIALS }}' | jq -r .)
        CLIENT_ID=$(echo $AZURE_CREDENTIALS | jq -r .clientId)
        CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
        TENANT_ID=$(echo $AZURE_CREDENTIALS | jq -r .tenantId)

        azd auth login --client-id $CLIENT_ID --client-secret $CLIENT_SECRET --tenant-id $TENANT_ID

    - name: Setup Python 
      uses: actions/setup-python@v5
      with:
          python-version: 3.8

    - name: Provision environment
      shell: bash
      id: setup-env-step
      run: |

        echo DUMMY1=${{ vars.DUMMY }}
        echo DUMMY2=${DUMMY}

        manual_environment=${{ inputs.MANUAL_PROVISIONING || 'false' }}

        if [ "$manual_environment" = "true" ]; then
          echo "Manual Provisioning"
          echo "ðŸ”¶ | Manual provisioning enabled. Action will just output variable values."

          echo "AZURE_SUBSCRIPTION_ID=${{ inputs.AZURE_SUBSCRIPTION_ID }}" >> "$GITHUB_OUTPUT"
          echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"

          echo "AZURE_LOCATION=${{ inputs.AZURE_LOCATION }}" >> "$GITHUB_OUTPUT"
          echo "AZURE_LOCATION=$AZURE_LOCATION"
          
          echo "AZUREAI_HUB_NAME=${AZUREAI_HUB_NAME}" >> "$GITHUB_OUTPUT"
          echo "AZUREAI_HUB_NAME=$AZUREAI_HUB_NAME"

          echo "AZUREAI_PROJECT_NAME=${AZUREAI_PROJECT_NAME}" >> "$GITHUB_OUTPUT"
          echo "AZUREAI_PROJECT_NAME=$AZUREAI_PROJECT_NAME"

          echo "AZURE_APP_SERVICE_NAME=${AZURE_APP_SERVICE_NAME}" >> "$GITHUB_OUTPUT"
          echo "AZURE_APP_SERVICE_NAME=$AZURE_APP_SERVICE_NAME" 

          echo "AZURE_APP_SERVICE_PLAN_NAME=${AZURE_APP_SERVICE_PLAN_NAME}" >> "$GITHUB_OUTPUT"
          echo "AZURE_APP_SERVICE_PLAN_NAME=$AZURE_APP_SERVICE_PLAN_NAME"

          echo "AZURE_CONTAINER_REGISTRY_NAME=${AZURE_CONTAINER_REGISTRY_NAME}" >> "$GITHUB_OUTPUT"
          echo "AZURE_CONTAINER_REGISTRY_NAME=$AZURE_CONTAINER_REGISTRY_NAME"

          echo "AZURE_CONTAINER_REPOSITORY_NAME=${AZURE_CONTAINER_REPOSITORY_NAME}" >> "$GITHUB_OUTPUT"
          echo "AZURE_CONTAINER_REPOSITORY_NAME=$AZURE_CONTAINER_REPOSITORY_NAME"

          echo "AZURE_KEY_VAULT_NAME=${AZURE_KEY_VAULT_NAME}" >> "$GITHUB_OUTPUT"
          echo "AZURE_KEY_VAULT_NAME=$AZURE_KEY_VAULT_NAME"

          echo "AZURE_LOG_ANALYTICS_NAME=${AZURE_LOG_ANALYTICS_NAME}" >> "$GITHUB_OUTPUT"
          echo "AZURE_LOG_ANALYTICS_NAME=$AZURE_LOG_ANALYTICS_NAME"

          echo "AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION}" >> "$GITHUB_OUTPUT"
          echo "AZURE_OPENAI_API_VERSION=$AZURE_OPENAI_API_VERSION"

          echo "AZURE_OPENAI_CHAT_DEPLOYMENT=${AZURE_OPENAI_CHAT_DEPLOYMENT}" >> "$GITHUB_OUTPUT"
          echo "AZURE_OPENAI_CHAT_DEPLOYMENT=$AZURE_OPENAI_CHAT_DEPLOYMENT"

          echo "AZURE_OPENAI_EMBEDDING_DEPLOYMENT=${AZURE_OPENAI_EMBEDDING_DEPLOYMENT}" >> "$GITHUB_OUTPUT"
          echo "AZURE_OPENAI_EMBEDDING_DEPLOYMENT=$AZURE_OPENAI_EMBEDDING_DEPLOYMENT"

          echo "AZURE_OPENAI_EMBEDDING_MODEL=${AZURE_OPENAI_EMBEDDING_MODEL}" >> "$GITHUB_OUTPUT"
          echo "AZURE_OPENAI_EMBEDDING_MODEL=$AZURE_OPENAI_EMBEDDING_MODEL"

          echo "AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}" >> "$GITHUB_OUTPUT"
          echo "AZURE_OPENAI_ENDPOINT=$AZURE_OPENAI_ENDPOINT"

          echo "AZURE_OPENAI_NAME=${AZURE_OPENAI_NAME}" >> "$GITHUB_OUTPUT"
          echo "AZURE_OPENAI_NAME=$AZURE_OPENAI_NAME"

          echo "AZURE_PRINCIPAL_ID=${AZURE_PRINCIPAL_ID}" >> "$GITHUB_OUTPUT"
          echo "AZURE_PRINCIPAL_ID=$AZURE_PRINCIPAL_ID"

          echo "AZURE_RESOURCE_GROUP=${AZURE_RESOURCE_GROUP}" >> "$GITHUB_OUTPUT"
          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP"

          echo "AZURE_SEARCH_ENDPOINT=${AZURE_SEARCH_ENDPOINT}" >> "$GITHUB_OUTPUT"
          echo "AZURE_SEARCH_ENDPOINT=$AZURE_SEARCH_ENDPOINT"

          echo "AZURE_SEARCH_INDEX_SAMPLE_DATA=${AZURE_SEARCH_INDEX_SAMPLE_DATA}" >> "$GITHUB_OUTPUT"
          echo "AZURE_SEARCH_INDEX_SAMPLE_DATA=$AZURE_SEARCH_INDEX_SAMPLE_DATA"

          echo "AZURE_SEARCH_NAME=${AZURE_SEARCH_NAME}" >> "$GITHUB_OUTPUT"
          echo "AZURE_SEARCH_NAME=$AZURE_SEARCH_NAME"

          echo "AZURE_STORAGE_ACCOUNT_NAME=${AZURE_STORAGE_ACCOUNT_NAME}" >> "$GITHUB_OUTPUT"
          echo "AZURE_STORAGE_ACCOUNT_NAME=$AZURE_STORAGE_ACCOUNT_NAME"

          echo "PROMPTFLOW_SERVING_ENGINE=${PROMPTFLOW_SERVING_ENGINE}" >> "$GITHUB_OUTPUT"
          echo "PROMPTFLOW_SERVING_ENGINE=$PROMPTFLOW_SERVING_ENGINE"

          echo "PROMPTFLOW_WORKER_NUM=${PROMPTFLOW_WORKER_NUM}" >> "$GITHUB_OUTPUT"
          echo "PROMPTFLOW_WORKER_NUM=$PROMPTFLOW_WORKER_NUM"


        else
          echo "ðŸ”¶ | Manual provisioning disabled. Will provision environment if needed."

          job_provisioned_environment=false

          # initialize azd

          export AZURE_SUBSCRIPTION_ID="${{ inputs.AZURE_SUBSCRIPTION_ID }}"
          echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID" >> "$GITHUB_OUTPUT"
          echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"

          export AZURE_LOCATION="${{ inputs.AZURE_LOCATION }}"
          echo "AZURE_LOCATION=$AZURE_LOCATION" >> "$GITHUB_OUTPUT"
          echo "AZURE_LOCATION=$AZURE_LOCATION"

          echo "azd init -e ${{ inputs.AZURE_ENV_NAME }} -l $AZURE_LOCATION -s $AZURE_SUBSCRIPTION_ID"
          azd init -e ${{ inputs.AZURE_ENV_NAME }} -l $AZURE_LOCATION -s $AZURE_SUBSCRIPTION_ID

          # Run azd env refresh and capture last deployment outputs
          echo "ðŸ”¶ | Run azd env refresh and capture outputs"
          set +e
          output=$(azd env refresh -e "${{ inputs.AZURE_ENV_NAME }}" 2>&1)
          exit_code=$?
          set -e
          echo "azd env refresh exit code: $exit_code"
          echo "azd env refresh output:"
          echo "$output"

          # Check the exit code to determine if there was a previous deployment
          echo "Check if there was a previous deployment"
          if [ $exit_code -ne 0 ]; then
            echo "ðŸ”¶ | No previous deployment exists."
            deploy_exists=false
          else
            echo "ðŸ”¶ | Previous deployment exists."
            deploy_exists=true
          fi
          echo "deploy_exists=$deploy_exists" >> "$GITHUB_OUTPUT"

          # 1. Provision the environment if it doesn't exist.

          if [ "$deploy_exists" = false ]; then
              echo "ðŸ”¶ | Provision the environment since deployment doesn't exist."
              echo "Running azd provision --no-prompt..." 
              azd provision --no-prompt
              job_provisioned_environment=true
          fi

          # Check if the resource group exists

          echo "ðŸ”¶ | Checking if the resource group exists"
          AZURE_RESOURCE_GROUP=$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_RESOURCE_GROUP | cut -d'=' -f2 | tr -d '"' || true)
          if [ -z "$AZURE_RESOURCE_GROUP" ]; then
            resource_group_exist=false
          else
            resource_group_exist=$(az group exists --name "$AZURE_RESOURCE_GROUP")  
          fi

          # 2. Force provision if the previous deployment exists but the resource group doesn't.
          #    This situation occurs if you made a deployment and then deleted the resource group to force reprovisioning.

          if [ "$deploy_exists" = true ] && [ "$resource_group_exist" = false ]; then
            echo "ðŸ”¶ | Deployment exists but resource group $AZURE_RESOURCE_GROUP doesn't."
            echo "ðŸ”¶ | Clean up any residue and do a new."
            echo "azd down --force --purge"
            azd down --force --purge
            echo "Running azd provision --no-prompt ... "
            rm -rf .azure
            azd init -e ${{ inputs.AZURE_ENV_NAME }} -l $AZURE_LOCATION -s $AZURE_SUBSCRIPTION_ID
            azd provision --no-prompt
            job_provisioned_environment=true
          fi          

          # 3. Reuse output values from the last deployment to reuse resource names and avoid duplicating resources.
          #    If the variable with the resource name is set in the GitHub Environment, don't reuse the last deployment parameter value.

          echo "ðŸ”¶ | ${{ inputs.AZURE_ENV_NAME }} environment variables"

          # Set environment variables by getting them from the GitHub environment or the last deployment. GitHub environment variables take precedence over those from the last deployment.

          AZUREAI_HUB_NAME=${AZUREAI_HUB_NAME:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZUREAI_HUB_NAME | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZUREAI_HUB_NAME=$AZUREAI_HUB_NAME" >> "$GITHUB_OUTPUT"
          echo "AZUREAI_HUB_NAME=$AZUREAI_HUB_NAME"

          AZUREAI_PROJECT_NAME=${AZUREAI_PROJECT_NAME:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZUREAI_PROJECT_NAME | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZUREAI_PROJECT_NAME=$AZUREAI_PROJECT_NAME" >> "$GITHUB_OUTPUT"
          echo "AZUREAI_PROJECT_NAME=$AZUREAI_PROJECT_NAME"

          AZURE_APP_INSIGHTS_NAME=${AZURE_APP_INSIGHTS_NAME:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_APP_INSIGHTS_NAME | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_APP_INSIGHTS_NAME=$AZURE_APP_INSIGHTS_NAME" >> "$GITHUB_OUTPUT"
          echo "AZURE_APP_INSIGHTS_NAME=$AZURE_APP_INSIGHTS_NAME"

          AZURE_APP_SERVICE_NAME=${AZURE_APP_SERVICE_NAME:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_APP_SERVICE_NAME | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_APP_SERVICE_NAME=$AZURE_APP_SERVICE_NAME" >> "$GITHUB_OUTPUT"
          echo "AZURE_APP_SERVICE_NAME=$AZURE_APP_SERVICE_NAME"

          AZURE_APP_SERVICE_PLAN_NAME=${AZURE_APP_SERVICE_PLAN_NAME:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_APP_SERVICE_PLAN_NAME | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_APP_SERVICE_PLAN_NAME=$AZURE_APP_SERVICE_PLAN_NAME" >> "$GITHUB_OUTPUT"
          echo "AZURE_APP_SERVICE_PLAN_NAME=$AZURE_APP_SERVICE_PLAN_NAME"

          AZURE_CONTAINER_REGISTRY_NAME=${AZURE_CONTAINER_REGISTRY_NAME:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_CONTAINER_REGISTRY_NAME | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_CONTAINER_REGISTRY_NAME=$AZURE_CONTAINER_REGISTRY_NAME" >> "$GITHUB_OUTPUT"
          echo "AZURE_CONTAINER_REGISTRY_NAME=$AZURE_CONTAINER_REGISTRY_NAME"

          AZURE_CONTAINER_REPOSITORY_NAME=${AZURE_CONTAINER_REPOSITORY_NAME:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_CONTAINER_REPOSITORY_NAME | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_CONTAINER_REPOSITORY_NAME=$AZURE_CONTAINER_REPOSITORY_NAME" >> "$GITHUB_OUTPUT"
          echo "AZURE_CONTAINER_REPOSITORY_NAME=$AZURE_CONTAINER_REPOSITORY_NAME"

          AZURE_KEY_VAULT_NAME=${AZURE_KEY_VAULT_NAME:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_KEY_VAULT_NAME | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_KEY_VAULT_NAME=$AZURE_KEY_VAULT_NAME" >> "$GITHUB_OUTPUT"
          echo "AZURE_KEY_VAULT_NAME=$AZURE_KEY_VAULT_NAME"

          AZURE_LOG_ANALYTICS_NAME=${AZURE_LOG_ANALYTICS_NAME:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_LOG_ANALYTICS_NAME | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_LOG_ANALYTICS_NAME=$AZURE_LOG_ANALYTICS_NAME" >> "$GITHUB_OUTPUT"
          echo "AZURE_LOG_ANALYTICS_NAME=$AZURE_LOG_ANALYTICS_NAME"

          AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_OPENAI_API_VERSION | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_OPENAI_API_VERSION=$AZURE_OPENAI_API_VERSION" >> "$GITHUB_OUTPUT"
          echo "AZURE_OPENAI_API_VERSION=$AZURE_OPENAI_API_VERSION"

          AZURE_OPENAI_CHAT_DEPLOYMENT=${AZURE_OPENAI_CHAT_DEPLOYMENT:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_OPENAI_CHAT_DEPLOYMENT | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_OPENAI_CHAT_DEPLOYMENT=$AZURE_OPENAI_CHAT_DEPLOYMENT" >> "$GITHUB_OUTPUT"
          echo "AZURE_OPENAI_CHAT_DEPLOYMENT=$AZURE_OPENAI_CHAT_DEPLOYMENT"

          AZURE_OPENAI_EMBEDDING_DEPLOYMENT=${AZURE_OPENAI_EMBEDDING_DEPLOYMENT:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_OPENAI_EMBEDDING_DEPLOYMENT | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_OPENAI_EMBEDDING_DEPLOYMENT=$AZURE_OPENAI_EMBEDDING_DEPLOYMENT" >> "$GITHUB_OUTPUT"
          echo "AZURE_OPENAI_EMBEDDING_DEPLOYMENT=$AZURE_OPENAI_EMBEDDING_DEPLOYMENT"

          AZURE_OPENAI_EMBEDDING_MODEL=${AZURE_OPENAI_EMBEDDING_MODEL:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_OPENAI_EMBEDDING_MODEL | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_OPENAI_EMBEDDING_MODEL=$AZURE_OPENAI_EMBEDDING_MODEL" >> "$GITHUB_OUTPUT"
          echo "AZURE_OPENAI_EMBEDDING_MODEL=$AZURE_OPENAI_EMBEDDING_MODEL"

          AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_OPENAI_ENDPOINT | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_OPENAI_ENDPOINT=$AZURE_OPENAI_ENDPOINT" >> "$GITHUB_OUTPUT"
          echo "AZURE_OPENAI_ENDPOINT=$AZURE_OPENAI_ENDPOINT"

          AZURE_OPENAI_NAME=${AZURE_OPENAI_NAME:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_OPENAI_NAME | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_OPENAI_NAME=$AZURE_OPENAI_NAME" >> "$GITHUB_OUTPUT"
          echo "AZURE_OPENAI_NAME=$AZURE_OPENAI_NAME"

          AZURE_PRINCIPAL_ID=${AZURE_PRINCIPAL_ID:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_PRINCIPAL_ID | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_PRINCIPAL_ID=$AZURE_PRINCIPAL_ID" >> "$GITHUB_OUTPUT"
          echo "AZURE_PRINCIPAL_ID=$AZURE_PRINCIPAL_ID"

          AZURE_RESOURCE_GROUP=${AZURE_RESOURCE_GROUP:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_RESOURCE_GROUP | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP" >> "$GITHUB_OUTPUT"
          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP"

          AZURE_SEARCH_ENDPOINT=${AZURE_SEARCH_ENDPOINT:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_SEARCH_ENDPOINT | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_SEARCH_ENDPOINT=$AZURE_SEARCH_ENDPOINT" >> "$GITHUB_OUTPUT"
          echo "AZURE_SEARCH_ENDPOINT=$AZURE_SEARCH_ENDPOINT"

          AZURE_SEARCH_INDEX_SAMPLE_DATA=${AZURE_SEARCH_INDEX_SAMPLE_DATA:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_SEARCH_INDEX_SAMPLE_DATA | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_SEARCH_INDEX_SAMPLE_DATA=$AZURE_SEARCH_INDEX_SAMPLE_DATA" >> "$GITHUB_OUTPUT"
          echo "AZURE_SEARCH_INDEX_SAMPLE_DATA=$AZURE_SEARCH_INDEX_SAMPLE_DATA"

          AZURE_SEARCH_NAME=${AZURE_SEARCH_NAME:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_SEARCH_NAME | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_SEARCH_NAME=$AZURE_SEARCH_NAME" >> "$GITHUB_OUTPUT"
          echo "AZURE_SEARCH_NAME=$AZURE_SEARCH_NAME"

          AZURE_STORAGE_ACCOUNT_NAME=${AZURE_STORAGE_ACCOUNT_NAME:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep AZURE_STORAGE_ACCOUNT_NAME | cut -d'=' -f2 | tr -d '"' || true)}
          echo "AZURE_STORAGE_ACCOUNT_NAME=$AZURE_STORAGE_ACCOUNT_NAME" >> "$GITHUB_OUTPUT"
          echo "AZURE_STORAGE_ACCOUNT_NAME=$AZURE_STORAGE_ACCOUNT_NAME"

          PROMPTFLOW_SERVING_ENGINE=${PROMPTFLOW_SERVING_ENGINE:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep PROMPTFLOW_SERVING_ENGINE | cut -d'=' -f2 | tr -d '"' || true)}
          echo "PROMPTFLOW_SERVING_ENGINE=$PROMPTFLOW_SERVING_ENGINE" >> "$GITHUB_OUTPUT"
          echo "PROMPTFLOW_SERVING_ENGINE=$PROMPTFLOW_SERVING_ENGINE"

          PROMPTFLOW_WORKER_NUM=${PROMPTFLOW_WORKER_NUM:-$(azd env get-values -e ${{ inputs.AZURE_ENV_NAME }} | grep PROMPTFLOW_WORKER_NUM | cut -d'=' -f2 | tr -d '"' || true)}
          echo "PROMPTFLOW_WORKER_NUM=$PROMPTFLOW_WORKER_NUM" >> "$GITHUB_OUTPUT"
          echo "PROMPTFLOW_WORKER_NUM=$PROMPTFLOW_WORKER_NUM"

          # 4. Update provisioned resources in case you made some changes in the Bicep template.   

          if [ "$job_provisioned_environment" = false ]; then
            echo "ðŸ”¶ | Resource group $AZURE_RESOURCE_GROUP exists."
            echo "ðŸ”¶ | Update provisioned resources in case the IaaC template has changed."
            echo "Running azd provision --no-prompt ..."
            azd provision --no-prompt
            job_provisioned_environment=true
          fi  

        fi

        indexSampleData=$([ -z "$AZURE_SEARCH_INDEX_SAMPLE_DATA" ] || [ "$AZURE_SEARCH_INDEX_SAMPLE_DATA" == "true" ] && echo true || echo false)
        echo indexSampleData=$indexSampleData

        if [ $indexSampleData = "true" ]; then
          echo "ðŸ”¶ | Post-provisioning - run post-provisioning script to populate sample data."
          ./infra/hooks/postprovision.sh
        else
          echo "ðŸ”¶ | Post-provisioning - set not to run post-provisioning script to populate sample data."
        fi

outputs:
  AZUREAI_PROJECT_NAME:
    description: 'Azure AI Project Name'
    value: ${{ steps.setup-env-step.outputs.AZUREAI_PROJECT_NAME }}
  AZURE_APP_SERVICE_NAME:
    description: 'Azure App Service Name'
    value: ${{ steps.setup-env-step.outputs.AZURE_APP_SERVICE_NAME }}
  AZURE_APP_SERVICE_PLAN_NAME:
    description: 'Azure App Service Plan Name'
    value: ${{ steps.setup-env-step.outputs.AZURE_APP_SERVICE_PLAN_NAME }}
  AZURE_CONTAINER_REGISTRY_NAME:
    description: 'Azure Container Registry Name'
    value: ${{ steps.setup-env-step.outputs.AZURE_CONTAINER_REGISTRY_NAME }}
  AZURE_CONTAINER_REPOSITORY_NAME:
    description: 'Azure Container Registry Repository Name'
    value: ${{ steps.setup-env-step.outputs.AZURE_CONTAINER_REPOSITORY_NAME }}
  AZURE_LOCATION:
    description: 'Azure location'
    value: ${{ steps.setup-env-step.outputs.AZURE_LOCATION }}
  AZURE_OPENAI_API_VERSION:
    description: 'Azure OpenAI API Version'
    value: ${{ steps.setup-env-step.outputs.AZURE_OPENAI_API_VERSION }}
  AZURE_OPENAI_CHAT_DEPLOYMENT:
    description: 'Azure OpenAI Chat Deployment'
    value: ${{ steps.setup-env-step.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT }}
  AZURE_OPENAI_EMBEDDING_DEPLOYMENT:
    description: 'Azure OpenAI Embedding Deployment'
    value: ${{ steps.setup-env-step.outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT }}
  AZURE_OPENAI_EMBEDDING_MODEL:
    description: 'Azure OpenAI Embedding Model'
    value: ${{ steps.setup-env-step.outputs.AZURE_OPENAI_EMBEDDING_MODEL }}
  AZURE_OPENAI_ENDPOINT:
    description: 'Azure OpenAI Endpoint'
    value: ${{ steps.setup-env-step.outputs.AZURE_OPENAI_ENDPOINT }}
  AZURE_OPENAI_NAME:
    description: 'Azure OpenAI Name'
    value: ${{ steps.setup-env-step.outputs.AZURE_OPENAI_NAME }}
  AZURE_PRINCIPAL_ID:
    description: 'Azure Principal ID'
    value: ${{ steps.setup-env-step.outputs.AZURE_PRINCIPAL_ID }}
  AZURE_RESOURCE_GROUP:
    description: 'Azure resource group'
    value: ${{ steps.setup-env-step.outputs.AZURE_RESOURCE_GROUP }}
  AZURE_SEARCH_ENDPOINT:
    description: 'Azure Search Endpoint'
    value: ${{ steps.setup-env-step.outputs.AZURE_SEARCH_ENDPOINT }}
  AZURE_SEARCH_INDEX_SAMPLE_DATA:
    description: 'Azure Search Index Sample Data'
    value: ${{ steps.setup-env-step.outputs.AZURE_SEARCH_INDEX_SAMPLE_DATA }}
  AZURE_SEARCH_NAME:
    description: 'Azure Search Name'
    value: ${{ steps.setup-env-step.outputs.AZURE_SEARCH_NAME }}
  AZURE_STORAGE_ACCOUNT_NAME:
    description: 'Azure Storage Account Name'
    value: ${{ steps.setup-env-step.outputs.AZURE_STORAGE_ACCOUNT_NAME }}
  AZURE_SUBSCRIPTION_ID:
    description: 'Azure subscription ID'
    value: ${{ steps.setup-env-step.outputs.AZURE_SUBSCRIPTION_ID }}
  PROMPTFLOW_SERVING_ENGINE:
    description: 'Promptflow Serving Engine'
    value: ${{ steps.setup-env-step.outputs.PROMPTFLOW_SERVING_ENGINE }}
  PROMPTFLOW_WORKER_NUM:
    description: 'Promptflow Worker Number'
    value: ${{ steps.setup-env-step.outputs.PROMPTFLOW_WORKER_NUM }}