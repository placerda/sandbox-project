name: CD Dev Pipeline

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag'
        required: true
  
jobs:
  
  TODO: ADD setup-env job

  deploy-flow:
    if: ${{ github.repository != 'Azure/llmops-project-template' }}    
    runs-on: ubuntu-latest
    needs: [setup-env] 
    environment: dev
    env:
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      AZURE_DEV_COLLECT_TELEMETRY: no

    steps:   
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install azd
        uses: Azure/setup-azd@v1.0.0
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: az Login
        run: |
          info=$(echo $AZURE_CREDENTIALS | jq -r '.')
          echo "::add-mask::$(echo $info | jq -r '.clientSecret')"
          az login \
            --service-principal \
            --username "$(echo $info | jq -r '.clientId')" \
            --password "$(echo $info | jq -r '.clientSecret')" \
            --tenant "$(echo $info | jq -r '.tenantId')"
        shell: bash

      - name: Set az account
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az account set --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: azd Login
        run: |
          info=$(echo $AZURE_CREDENTIALS | jq -r '.')
          echo "::add-mask::$(echo $info | jq -r '.clientSecret')"
          azd auth login \
            --client-id "$(echo $info | jq -r '.clientId')" \
            --client-secret "$(echo $info | jq -r '.clientSecret')" \
            --tenant-id "$(echo $info | jq -r '.tenantId')"
        shell: bash  
        
      - name: Deploy Flow
        env:
          SUBSCRIPTION_ID: ${{needs.setup-env.outputs.SUBSCRIPTION_ID}}
          LOCATION: ${{needs.setup-env.outputs.LOCATION}}
          AZURE_RESOURCE_GROUP: ${{needs.setup-env.outputs.AZURE_RESOURCE_GROUP}}
          AZURE_CONTAINER_REGISTRY_NAME: ${{needs.setup-env.outputs.AZURE_CONTAINER_REGISTRY_NAME}}
          AZURE_CONTAINER_REGISTRY_REPOSITORY_NAME: ${{needs.setup-env.outputs.AZURE_CONTAINER_REGISTRY_REPOSITORY_NAME}}
          AZURE_SEARCH_ENDPOINT: ${{needs.setup-env.outputs.AZURE_SEARCH_ENDPOINT}}
          AZURE_OPENAI_CHAT_DEPLOYMENT: ${{needs.setup-env.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT}}
          AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{needs.setup-env.outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT}}
          AZURE_OPENAI_EMBEDDING_MODEL: ${{needs.setup-env.outputs.AZURE_OPENAI_EMBEDDING_MODEL}}
          AZURE_OPENAI_API_VERSION: ${{needs.setup-env.outputs.AZURE_OPENAI_API_VERSION}}
          AZURE_OPENAI_ENDPOINT: ${{needs.setup-env.outputs.AZURE_OPENAI_ENDPOINT}}
          PROMPTFLOW_WORKER_NUM: ${{needs.setup-env.outputs.PROMPTFLOW_WORKER_NUM}}
          PROMPTFLOW_SERVING_ENGINE: ${{needs.setup-env.outputs.PROMPTFLOW_SERVING_ENGINE}}
          AZURE_APP_SERVICE_NAME: ${{needs.setup-env.outputs.AZURE_APP_SERVICE_NAME}}
          AZURE_APP_SERVICE_PLAN_NAME: ${{needs.setup-env.outputs.AZURE_APP_SERVICE_PLAN_NAME}}      
        run: | 
          echo "Deploying to Azure"
          # bash ./infra/hooks/deploy.sh --path dist -i ${{ github.event.inputs.image_tag }} --name $AZURE_APP_SERVICE_NAME -r $AZURE_CONTAINER_REGISTRY_NAME.azurecr.io -g $AZURE_RESOURCE_GROUP

      - name: GitHub Summary Step
        if: ${{ success() }}
        run: |
          echo "Deployment completed successfully! :rocket:" >> $GITHUB_STEP_SUMMARY        
          deep_link=https://portal.azure.com/#@/resource/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/rg-$AZURE_ENV_NAME/overview
          echo "ðŸ”— [View Resources Deployed Here]($deep_link)" >> $GITHUB_STEP_SUMMARY