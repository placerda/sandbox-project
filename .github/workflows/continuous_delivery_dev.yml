name: CD Dev Pipeline

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag'
        required: true
  
jobs:
  
  setup-env-job:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      AZURE_SUBSCRIPTION_ID: ${{ steps.provision-env.outputs.AZURE_SUBSCRIPTION_ID }}
      AZURE_LOCATION: ${{ steps.provision-env.outputs.AZURE_LOCATION }}
      AZURE_RESOURCE_GROUP: ${{ steps.provision-env.outputs.AZURE_RESOURCE_GROUP }}
      AZURE_CONTAINER_REGISTRY_NAME: ${{ steps.provision-env.outputs.AZURE_CONTAINER_REGISTRY_NAME }}
      AZURE_CONTAINER_REGISTRY_REPOSITORY_NAME: ${{ steps.provision-env.outputs.AZURE_CONTAINER_REGISTRY_REPOSITORY_NAME }}
      AZURE_SEARCH_ENDPOINT: ${{ steps.provision-env.outputs.AZURE_SEARCH_ENDPOINT }}
      AZURE_OPENAI_CHAT_DEPLOYMENT: ${{ steps.provision-env.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT }}
      AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{ steps.provision-env.outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT }}
      AZURE_OPENAI_EMBEDDING_MODEL: ${{ steps.provision-env.outputs.AZURE_OPENAI_EMBEDDING_MODEL }}
      AZURE_OPENAI_API_VERSION: ${{ steps.provision-env.outputs.AZURE_OPENAI_API_VERSION }}
      AZURE_OPENAI_ENDPOINT: ${{ steps.provision-env.outputs.AZURE_OPENAI_ENDPOINT }}
      PROMPTFLOW_WORKER_NUM: ${{ steps.provision-env.outputs.PROMPTFLOW_WORKER_NUM }}
      PROMPTFLOW_SERVING_ENGINE: ${{ steps.provision-env.outputs.PROMPTFLOW_SERVING_ENGINE }}
      AZURE_APP_SERVICE_NAME: ${{ steps.provision-env.outputs.AZURE_APP_SERVICE_NAME }}
      AZURE_APP_SERVICE_PLAN_NAME: ${{ steps.provision-env.outputs.AZURE_APP_SERVICE_PLAN_NAME }}
    steps: 
      - uses: actions/checkout@v4   
      - name: Provision dev environment
        uses: ./.github/actions/provision-env
        id: provision-env
        with:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}          
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
        env:
          AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
          AZURE_CONTAINER_REGISTRY_NAME: ${{ vars.AZURE_CONTAINER_REGISTRY_NAME }}
          AZURE_CONTAINER_REGISTRY_REPOSITORY_NAME: ${{ vars.AZURE_CONTAINER_REGISTRY_REPOSITORY_NAME }}
          AZURE_SEARCH_ENDPOINT: ${{ vars.AZURE_SEARCH_ENDPOINT }}
          AZURE_OPENAI_CHAT_DEPLOYMENT: ${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT }}
          AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{ vars.AZURE_OPENAI_EMBEDDING_DEPLOYMENT }}
          AZURE_OPENAI_EMBEDDING_MODEL: ${{ vars.AZURE_OPENAI_EMBEDDING_MODEL }}
          AZURE_OPENAI_API_VERSION: ${{ vars.AZURE_OPENAI_API_VERSION }}
          AZURE_OPENAI_ENDPOINT: ${{ vars.AZURE_OPENAI_ENDPOINT }}
          PROMPTFLOW_WORKER_NUM: ${{ vars.PROMPTFLOW_WORKER_NUM }}
          PROMPTFLOW_SERVING_ENGINE: ${{ vars.PROMPTFLOW_SERVING_ENGINE }}
          AZURE_APP_SERVICE_NAME: ${{ vars.AZURE_APP_SERVICE_NAME }}
          AZURE_APP_SERVICE_PLAN_NAME: ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }}

  deploy-flow:
    if: ${{ github.repository != 'Azure/llmops-project-template' }}    
    runs-on: ubuntu-latest
    needs: [setup-env-job] 
    environment: dev
    env:
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      AZURE_DEV_COLLECT_TELEMETRY: no

    steps:   
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install azd
        uses: Azure/setup-azd@v1.0.0
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: az Login
        run: |
          info=$(echo $AZURE_CREDENTIALS | jq -r '.')
          echo "::add-mask::$(echo $info | jq -r '.clientSecret')"
          az login \
            --service-principal \
            --username "$(echo $info | jq -r '.clientId')" \
            --password "$(echo $info | jq -r '.clientSecret')" \
            --tenant "$(echo $info | jq -r '.tenantId')"
        shell: bash

      - name: Set az account
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az account set --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: azd Login
        run: |
          info=$(echo $AZURE_CREDENTIALS | jq -r '.')
          echo "::add-mask::$(echo $info | jq -r '.clientSecret')"
          azd auth login \
            --client-id "$(echo $info | jq -r '.clientId')" \
            --client-secret "$(echo $info | jq -r '.clientSecret')" \
            --tenant-id "$(echo $info | jq -r '.tenantId')"
        shell: bash  
        
      - name: Deploy Flow
        env:
          AZURE_SUBSCRIPTION_ID: ${{needs.setup-env-job.outputs.AZURE_SUBSCRIPTION_ID}}
          AZURE_LOCATION: ${{needs.setup-env-job.outputs.AZURE_LOCATION}}
          AZURE_RESOURCE_GROUP: ${{needs.setup-env-job.outputs.AZURE_RESOURCE_GROUP}}
          AZURE_CONTAINER_REGISTRY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REGISTRY_NAME}}
          AZURE_CONTAINER_REGISTRY_REPOSITORY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REGISTRY_REPOSITORY_NAME}}
          AZURE_SEARCH_ENDPOINT: ${{needs.setup-env-job.outputs.AZURE_SEARCH_ENDPOINT}}
          AZURE_OPENAI_CHAT_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT}}
          AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT}}
          AZURE_OPENAI_EMBEDDING_MODEL: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_MODEL}}
          AZURE_OPENAI_API_VERSION: ${{needs.setup-env-job.outputs.AZURE_OPENAI_API_VERSION}}
          AZURE_OPENAI_ENDPOINT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_ENDPOINT}}
          PROMPTFLOW_WORKER_NUM: ${{needs.setup-env-job.outputs.PROMPTFLOW_WORKER_NUM}}
          PROMPTFLOW_SERVING_ENGINE: ${{needs.setup-env-job.outputs.PROMPTFLOW_SERVING_ENGINE}}
          AZURE_APP_SERVICE_NAME: ${{needs.setup-env-job.outputs.AZURE_APP_SERVICE_NAME}}
          AZURE_APP_SERVICE_PLAN_NAME: ${{needs.setup-env-job.outputs.AZURE_APP_SERVICE_PLAN_NAME}}
        shell: bash             
        run: | 
          echo "Deploying to Azure"
          image_tag="${AZURE_CONTAINER_REGISTRY_REPOSITORY_NAME}:${{ github.sha }}"
          name="${AZURE_APP_SERVICE_NAME}"
          service_plan_name="${AZURE_APP_SERVICE_PLAN_NAME}"
          subscription="${AZURE_SUBSCRIPTION_ID}"
          resource_group="${AZURE_RESOURCE_GROUP}"
          registry_name="${AZURE_CONTAINER_REGISTRY_NAME}"

          function append_to_command {
            command=$1
            if [ -n "$subscription" ]; then
              command="$command --subscription $subscription"
            fi
            if $verbose; then
              command="$command --debug"
            fi
            echo "$command"
          }

          # Check if the app exists
          echo "Checking if the app exists..."
          app_exists=$(az webapp show --name $name --resource-group $resource_group --query "name" -o tsv)

          if [ -z "$app_exists" ]; then
            # Create app
            echo "Creating app...$name"
            command="az webapp create --name $name -p $service_plan_name --deployment-container-image-name $image_tag --startup-file 'bash start.sh' -g $resource_group"
            command=$(append_to_command "$command")
            echo "$command"
            eval "$command"
          else
            # Update app
            echo "Updating app...$name"
            command="az webapp config container set --name $name --resource-group $resource_group --container-image-name $image_tag"
            command=$(append_to_command "$command")
            echo "$command"
            eval "$command"
          fi
          
          # Set ACR credentials
          echo "Setting ACR credentials..."
          az acr update -n $registry_name --admin-enabled true
          acr_username=$(az acr credential show --name $registry_name --query username --output tsv)
          acr_password=$(az acr credential show --name $registry_name --query passwords[0].value --output tsv)
          az webapp config container set --name $name --resource-group $resource_group --docker-registry-server-user $acr_username --docker-registry-server-password $acr_password

          # Config environment variable
          echo "Config  app...$name"

          # Port default to 8080 corresponding to the DockerFile
          command="az webapp config appsettings set -g $resource_group --name $name --settings USER_AGENT=promptflow-appservice WEBSITES_PORT=8080 @settings.json "
          command=$(append_to_command "$command")
          echo "$command"
          eval "$command"
          az webapp restart --name $name --resource-group $resource_group

          echo "Please go to https://portal.azure.com/ to config environment variables of $name app at (Settings>Configuration) or (Settings>Environment variables)"
          echo "Reach deployment logs at (Deployment>Deployment Central) and app logs at (Monitoring>Log stream)"
          echo "Reach advanced deployment tools at https://$name.scm.azurewebsites.net/"
          echo "Reach more details about app service at https://learn.microsoft.com/en-us/azure/app-service/"

      - name: GitHub Summary Step
        if: ${{ success() }}
        run: |
          echo "Deployment completed successfully! :rocket:" >> $GITHUB_STEP_SUMMARY        
          deep_link=https://portal.azure.com/#@/resource/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/rg-$AZURE_ENV_NAME/overview
          echo "ðŸ”— [View Resources Deployed Here]($deep_link)" >> $GITHUB_STEP_SUMMARY