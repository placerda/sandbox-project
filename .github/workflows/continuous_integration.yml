name: CI Pipeline

permissions:
  contents: read
  actions: write  

on:
  push:
    branches:
      - develop

jobs:

  setup-env-job:
    if: ${{ github.repository != 'Azure/llmops-project-template' }}        
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      AZUREAI_PROJECT_NAME: ${{ steps.provision-env.outputs.AZUREAI_PROJECT_NAME }}
      AZURE_APP_SERVICE_NAME: ${{ steps.provision-env.outputs.AZURE_APP_SERVICE_NAME }}
      AZURE_APP_SERVICE_PLAN_NAME: ${{ steps.provision-env.outputs.AZURE_APP_SERVICE_PLAN_NAME }}
      AZURE_CONTAINER_REGISTRY_NAME: ${{ steps.provision-env.outputs.AZURE_CONTAINER_REGISTRY_NAME }}
      AZURE_CONTAINER_REPOSITORY_NAME: ${{ steps.provision-env.outputs.AZURE_CONTAINER_REPOSITORY_NAME }}
      AZURE_LOCATION: ${{ steps.provision-env.outputs.AZURE_LOCATION }}
      AZURE_OPENAI_API_VERSION: ${{ steps.provision-env.outputs.AZURE_OPENAI_API_VERSION }}
      AZURE_OPENAI_CHAT_DEPLOYMENT: ${{ steps.provision-env.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT }}
      AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{ steps.provision-env.outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT }}
      AZURE_OPENAI_EMBEDDING_MODEL: ${{ steps.provision-env.outputs.AZURE_OPENAI_EMBEDDING_MODEL }}
      AZURE_OPENAI_ENDPOINT: ${{ steps.provision-env.outputs.AZURE_OPENAI_ENDPOINT }}
      AZURE_OPENAI_NAME: ${{ steps.provision-env.outputs.AZURE_OPENAI_NAME }}
      AZURE_RESOURCE_GROUP: ${{ steps.provision-env.outputs.AZURE_RESOURCE_GROUP }}
      AZURE_SEARCH_ENDPOINT: ${{ steps.provision-env.outputs.AZURE_SEARCH_ENDPOINT }}
      AZURE_SEARCH_INDEX_SAMPLE_DATA: ${{ steps.provision-env.outputs.AZURE_SEARCH_INDEX_SAMPLE_DATA }}
      AZURE_SEARCH_NAME: ${{ steps.provision-env.outputs.AZURE_SEARCH_NAME }}
      AZURE_SUBSCRIPTION_ID: ${{ steps.provision-env.outputs.AZURE_SUBSCRIPTION_ID }}
      PROMPTFLOW_SERVING_ENGINE: ${{ steps.provision-env.outputs.PROMPTFLOW_SERVING_ENGINE }}
      PROMPTFLOW_WORKER_NUM: ${{ steps.provision-env.outputs.PROMPTFLOW_WORKER_NUM }}
    steps: 
      - uses: actions/checkout@v4   
      - name: Provision dev environment
        uses: ./.github/actions/provision-env
        id: provision-env
        with:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
        env:
          AZUREAI_PROJECT_NAME: ${{ vars.AZUREAI_PROJECT_NAME }}
          AZURE_APP_SERVICE_NAME: ${{ vars.AZURE_APP_SERVICE_NAME }}
          AZURE_APP_SERVICE_PLAN_NAME: ${{ vars.AZURE_APP_SERVICE_PLAN_NAME }}
          AZURE_CONTAINER_REGISTRY_NAME: ${{ vars.AZURE_CONTAINER_REGISTRY_NAME }}
          AZURE_CONTAINER_REPOSITORY_NAME: ${{ vars.AZURE_CONTAINER_REPOSITORY_NAME }}
          AZURE_OPENAI_API_VERSION: ${{ vars.AZURE_OPENAI_API_VERSION }}
          AZURE_OPENAI_CHAT_DEPLOYMENT: ${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT }}
          AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{ vars.AZURE_OPENAI_EMBEDDING_DEPLOYMENT }}
          AZURE_OPENAI_EMBEDDING_MODEL: ${{ vars.AZURE_OPENAI_EMBEDDING_MODEL }}
          AZURE_OPENAI_ENDPOINT: ${{ vars.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_NAME: ${{ vars.AZURE_OPENAI_NAME }}
          AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
          AZURE_SEARCH_ENDPOINT: ${{ vars.AZURE_SEARCH_ENDPOINT }}
          AZURE_SEARCH_INDEX_SAMPLE_DATA: ${{ vars.AZURE_SEARCH_INDEX_SAMPLE_DATA }}
          AZURE_SEARCH_NAME: ${{ vars.AZURE_SEARCH_NAME }}
          PROMPTFLOW_SERVING_ENGINE: ${{ vars.PROMPTFLOW_SERVING_ENGINE }}
          PROMPTFLOW_WORKER_NUM: ${{ vars.PROMPTFLOW_WORKER_NUM }}
          
  unit-testing:
    runs-on: ubuntu-latest
    needs: setup-env-job    
    environment: dev
    steps:
      - name: Unit tests
        run: |
          echo "Run Pytest"

  code-standard-check:
    needs: [setup-env-job]    
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Check code standards
        run: |
          echo "Run Pylint"

  build-image:
    runs-on: ubuntu-latest
    needs: [setup-env-job, unit-testing, code-standard-check]    
    environment: dev
    outputs:
      IMAGE_TAG: ${{ steps.set-image-tag.outputs.IMAGE_TAG }}    
    steps:
      - uses: actions/checkout@v4      
      - name: Setup Python 
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Install Promptflow CLI
        run: |
            python -m pip install --upgrade pip
            pip install promptflow --upgrade
            pf --version  

      - name: Install required dependencies
        run: | 
          pip cache purge
          pip install --upgrade pip setuptools
          pip install -r src/requirements.txt

      - name: Create flow docker files
        run: |
              # reference: https://github.com/microsoft/promptflow/tree/main/examples/tutorials/flow-deploy/azure-app-service
              pf flow build --source src --output dist --format docker
              # mkdir -p dist/connections
              # touch dist/connections/placeholder          

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
            name: build-artifacts
            path: dist/

      - name: Set image tag
        id: set-image-tag
        env:
          AZURE_CONTAINER_REPOSITORY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REPOSITORY_NAME}}      
        run: |
            echo "IMAGE_TAG=$AZURE_CONTAINER_REPOSITORY_NAME:${{ github.sha }}" >> "$GITHUB_OUTPUT"
            echo "IMAGE_TAG=$AZURE_CONTAINER_REPOSITORY_NAME:${{ github.sha }}"

      - name: Login to Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build Image
        run: |
            # echo "Building Image..."
            # echo "AZURE_CONTAINER_REGISTRY_NAME=$AZURE_CONTAINER_REGISTRY_NAME"
            # echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP"
            # bash ./infra/hooks/build.sh --path dist -i $IMAGE_TAG --plan $AZURE_APP_SERVICE_PLAN_NAME --name $AZURE_APP_SERVICE_NAME -r $AZURE_CONTAINER_REGISTRY_NAME -g $AZURE_RESOURCE_GROUP --subscription $SUBSCRIPTION_ID --verbose

            echo "✅ Building docker image..."
            path=dist
            image_tag=${{ steps.set-image-tag.outputs.IMAGE_TAG }}
            echo "Change working directory to $path"
            cd "$path"
            docker build -t "$image_tag" .

      - name: Run Container
        env:
          AZURE_SUBSCRIPTION_ID: ${{needs.setup-env-job.outputs.AZURE_SUBSCRIPTION_ID}}
          AZURE_LOCATION: ${{needs.setup-env-job.outputs.AZURE_LOCATION}}
          AZURE_RESOURCE_GROUP: ${{needs.setup-env-job.outputs.AZURE_RESOURCE_GROUP}}
          AZURE_SEARCH_ENDPOINT: ${{needs.setup-env-job.outputs.AZURE_SEARCH_ENDPOINT}}
          AZURE_OPENAI_CHAT_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_CHAT_DEPLOYMENT}}
          AZURE_OPENAI_EMBEDDING_DEPLOYMENT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_DEPLOYMENT}}
          AZURE_OPENAI_EMBEDDING_MODEL: ${{needs.setup-env-job.outputs.AZURE_OPENAI_EMBEDDING_MODEL}}
          AZURE_OPENAI_API_VERSION: ${{needs.setup-env-job.outputs.AZURE_OPENAI_API_VERSION}}
          AZURE_OPENAI_ENDPOINT: ${{needs.setup-env-job.outputs.AZURE_OPENAI_ENDPOINT}}
          PROMPTFLOW_WORKER_NUM: ${{needs.setup-env-job.outputs.PROMPTFLOW_WORKER_NUM}}
          PROMPTFLOW_SERVING_ENGINE: ${{needs.setup-env-job.outputs.PROMPTFLOW_SERVING_ENGINE}}
        run: |
          echo "✅ Run image..."
          docker run -d -p 8080:8080 -e PROMPTFLOW_SERVING_ENGINE=$PROMPTFLOW_SERVING_ENGINE -e PROMPTFLOW_WORKER_NUM=$PROMPTFLOW_WORKER_NUM ${{ steps.set-image-tag.outputs.IMAGE_TAG }}

      - name: Register Image
        env:
          AZURE_CONTAINER_REGISTRY_NAME: ${{needs.setup-env-job.outputs.AZURE_CONTAINER_REGISTRY_NAME}}
        run: |
          image_tag=${{ steps.set-image-tag.outputs.IMAGE_TAG }}  
          full_registry_name="$AZURE_CONTAINER_REGISTRY_NAME.azurecr.io"
          echo "✅ Trying to login to $full_registry_name..."
          az acr login -n "$full_registry_name"

          acr_image_tag=$full_registry_name/$image_tag
          echo "✅ ACR image tag: $acr_image_tag"
          docker tag "$image_tag" "$acr_image_tag"
          image_tag=$acr_image_tag

          echo "✅ Start pushing image...$image_tag"
          docker push "$image_tag"            

  trigger-cd-pipeline:
    runs-on: ubuntu-latest
    needs: [setup-env-job, build-image]    
    environment: dev    
    steps:
      - name: Trigger CD pipeline
        env:
          IMAGE_TAG: ${{needs.build-image.outputs.IMAGE_TAG}}
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/continuous_delivery_dev.yml/dispatches \
            -d '{"ref":"develop","inputs":{"image_tag":"'"$IMAGE_TAG"'"}}'